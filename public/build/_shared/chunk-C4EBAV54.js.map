{
  "version": 3,
  "sources": ["../../../app/utils.ts"],
  "sourcesContent": ["import { useMemo } from \"react\";\nimport { useMatches } from \"@remix-run/react\";\nimport type { User } from \"./models/user.server\";\n\nexport function useMatchesData(id: string) {\n  const matchingRoutes = useMatches();\n  const route = useMemo(\n    () => matchingRoutes.find((route) => route.id === id),\n    [matchingRoutes, id]\n  );\n\n  return route?.data;\n}\n\nexport function isUser(user: User) {\n  return user && typeof user === \"object\";\n}\n\nexport function useOptionalUser() {\n  const data = useMatchesData(\"root\");\n  if (!data || !isUser(data.user)) {\n    return undefined;\n  }\n  return data.user;\n}\n\nexport function useUser() {\n  const maybeUser = useOptionalUser();\n  if (!maybeUser) {\n    throw new Error(\n      \"No user found in root loader, but user is required by useUser. If user is optional, try useOptionalUser instead.\"\n    );\n  }\n  return maybeUser;\n}\n\nexport function validateEmail(email: unknown): email is string {\n  return typeof email === \"string\" && email.length > 3 && email.includes(\"@\");\n}\n"],
  "mappings": ";;;;;;;;;;AAAA;AAAA,mBAAwB;AAIjB,wBAAwB,IAAY;AACzC,QAAM,iBAAiB;AACvB,QAAM,QAAQ,0BACZ,MAAM,eAAe,KAAK,CAAC,WAAU,OAAM,OAAO,KAClD,CAAC,gBAAgB;AAGnB,SAAO,+BAAO;AAAA;AAGT,gBAAgB,MAAY;AACjC,SAAO,QAAQ,OAAO,SAAS;AAAA;AAG1B,2BAA2B;AAChC,QAAM,OAAO,eAAe;AAC5B,MAAI,CAAC,QAAQ,CAAC,OAAO,KAAK,OAAO;AAC/B,WAAO;AAAA;AAET,SAAO,KAAK;AAAA;AAGP,mBAAmB;AACxB,QAAM,YAAY;AAClB,MAAI,CAAC,WAAW;AACd,UAAM,IAAI,MACR;AAAA;AAGJ,SAAO;AAAA;",
  "names": []
}
