{
  "version": 3,
  "sources": ["browser-route-module:/Users/paula/code/MusicTree/trap-stack/app/routes/login.tsx?browser", "../../../app/routes/login.tsx"],
  "sourcesContent": ["export { default, meta } from \"/Users/paula/code/MusicTree/trap-stack/app/routes/login.tsx\";", "import React from \"react\";\nimport type {\n  ActionFunction,\n  LoaderFunction,\n  MetaFunction,\n} from \"@remix-run/node\";\nimport { json, redirect } from \"@remix-run/node\";\nimport { Form, Link, useActionData, useSearchParams } from \"@remix-run/react\";\nimport { verifyLogin } from \"~/models/user.server\";\nimport { createUserSession, getUserId } from \"~/session.server\";\nimport { validateEmail } from \"~/utils\";\n\nexport const meta: MetaFunction = () => {\n  return {\n    title: \"Login\",\n  };\n};\n\ninterface ActionData {\n  errors: {\n    email?: string;\n    password?: string;\n  };\n}\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  const userId = await getUserId(request);\n  if (userId) return redirect(\"/\");\n  return json({});\n};\n\nexport const action: ActionFunction = async ({ request }) => {\n  const formData = await request.formData();\n  const email = formData.get(\"email\");\n  const password = formData.get(\"password\");\n  const redirectTo = formData.get(\"redirectTo\");\n  const remember = formData.get(\"remember\");\n\n  if (!validateEmail(email)) {\n    return json({ errors: { email: \"Email is invalid.\" } }, { status: 400 });\n  }\n\n  if (typeof password !== \"string\") {\n    return json(\n      { errors: { password: \"Valid password is required.\" } },\n      { status: 400 }\n    );\n  }\n\n  if (password.length < 6) {\n    return json(\n      { errors: { password: \"Password is too short\" } },\n      { status: 400 }\n    );\n  }\n\n  const user = await verifyLogin(email, password);\n\n  if (!user) {\n    return json(\n      { errors: { email: \"Invalid email or password\" } },\n      { status: 400 }\n    );\n  }\n\n  return createUserSession({\n    request,\n    userId: user.id,\n    remember: remember === \"on\" ? true : false,\n    redirectTo: typeof redirectTo === \"string\" ? redirectTo : \"/notes\",\n  });\n};\n\nexport default function Login() {\n  const [searchParams] = useSearchParams();\n  const redirectTo = searchParams.get(\"redirectTo\") ?? \"/notes\";\n\n  const actionData = useActionData() as ActionData;\n  const emailRef = React.useRef<HTMLInputElement>(null);\n  const passwordRef = React.useRef<HTMLInputElement>(null);\n\n  React.useEffect(() => {\n    if (actionData?.errors?.email) {\n      emailRef?.current?.focus();\n    }\n\n    if (actionData?.errors?.password) {\n      passwordRef?.current?.focus();\n    }\n  }, [actionData]);\n\n  return (\n    <div className=\"flex min-h-full flex-col justify-center\">\n      <div className=\"mx-auto w-full max-w-md px-8\">\n        <Form method=\"post\" className=\"space-y-6\" noValidate>\n          <div>\n            <label className=\"text-sm font-medium\" htmlFor=\"email\">\n              <span className=\"block text-gray-700\">Email Address</span>\n              {actionData?.errors?.email && (\n                <span className=\"block pt-1 text-red-700\" id=\"email-error\">\n                  {actionData?.errors?.email}\n                </span>\n              )}\n            </label>\n            <input\n              className=\"w-full rounded border border-gray-500 px-2 py-1 text-lg\"\n              autoComplete=\"email\"\n              type=\"email\"\n              name=\"email\"\n              id=\"email\"\n              aria-invalid={actionData?.errors?.email ? true : undefined}\n              aria-describedby=\"email-error\"\n              ref={emailRef}\n            />\n          </div>\n          <div>\n            <label className=\"text-sm font-medium\" htmlFor=\"password\">\n              <span className=\"block text-gray-700\">Password</span>\n              <span className=\"block font-light text-gray-700\">\n                Must have at least 6 characters.\n              </span>\n              {actionData?.errors?.password && (\n                <span className=\"pt-1 text-red-700\" id=\"password-error\">\n                  {actionData?.errors?.password}\n                </span>\n              )}\n            </label>\n            <input\n              id=\"password\"\n              type=\"password\"\n              name=\"password\"\n              autoComplete=\"\"\n              className=\"w-full rounded border border-gray-500 px-2 py-1 text-lg\"\n              aria-invalid={actionData?.errors?.password ? true : undefined}\n              aria-describedby=\"password-error\"\n              ref={passwordRef}\n            />\n          </div>\n          <button\n            className=\"w-full rounded bg-blue-500  py-2 px-4 text-white hover:bg-blue-600 focus:bg-blue-400\"\n            type=\"submit\"\n          >\n            Log in\n          </button>\n          <input type=\"hidden\" name=\"redirectTo\" value={redirectTo} />\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center\">\n              <input\n                className=\"h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\n                id=\"remember\"\n                name=\"remember\"\n                type=\"checkbox\"\n              />\n              <label\n                className=\"ml-2 block text-sm text-gray-900\"\n                htmlFor=\"remember\"\n              >\n                Remember me\n              </label>\n            </div>\n            <div className=\"text-center text-sm text-gray-500\">\n              Don't have an account?{\" \"}\n              <Link\n                className=\"text-blue-500 underline\"\n                to={{ pathname: \"/join\" }}\n              >\n                Sign up\n              </Link>\n            </div>\n          </div>\n        </Form>\n      </div>\n    </div>\n  );\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;;;ACAA;AAAA,mBAAkB;AAQlB,kBAA4B;AAC5B,qBAA6C;AAGtC,IAAM,OAAqB,MAAM;AACtC,SAAO;AAAA,IACL,OAAO;AAAA;AAAA;AA2DI,iBAAiB;AAzEhC;AA0EE,QAAM,CAAC,gBAAgB;AACvB,QAAM,aAAa,mBAAa,IAAI,kBAAjB,YAAkC;AAErD,QAAM,aAAa;AACnB,QAAM,WAAW,qBAAM,OAAyB;AAChD,QAAM,cAAc,qBAAM,OAAyB;AAEnD,uBAAM,UAAU,MAAM;AAjFxB;AAkFI,QAAI,gDAAY,WAAZ,oBAAoB,OAAO;AAC7B,kDAAU,YAAV,oBAAmB;AAAA;AAGrB,QAAI,gDAAY,WAAZ,oBAAoB,UAAU;AAChC,wDAAa,YAAb,oBAAsB;AAAA;AAAA,KAEvB,CAAC;AAEJ,SACE,mDAAC,OAAD;AAAA,IAAK,WAAU;AAAA,KACb,mDAAC,OAAD;AAAA,IAAK,WAAU;AAAA,KACb,mDAAC,MAAD;AAAA,IAAM,QAAO;AAAA,IAAO,WAAU;AAAA,IAAY,YAAU;AAAA,KAClD,mDAAC,OAAD,MACE,mDAAC,SAAD;AAAA,IAAO,WAAU;AAAA,IAAsB,SAAQ;AAAA,KAC7C,mDAAC,QAAD;AAAA,IAAM,WAAU;AAAA,KAAsB,kBACrC,gDAAY,WAAZ,mBAAoB,UACnB,mDAAC,QAAD;AAAA,IAAM,WAAU;AAAA,IAA0B,IAAG;AAAA,KAC1C,+CAAY,WAAZ,mBAAoB,SAI3B,mDAAC,SAAD;AAAA,IACE,WAAU;AAAA,IACV,cAAa;AAAA,IACb,MAAK;AAAA,IACL,MAAK;AAAA,IACL,IAAG;AAAA,IACH,gBAAc,gDAAY,WAAZ,mBAAoB,SAAQ,OAAO;AAAA,IACjD,oBAAiB;AAAA,IACjB,KAAK;AAAA,OAGT,mDAAC,OAAD,MACE,mDAAC,SAAD;AAAA,IAAO,WAAU;AAAA,IAAsB,SAAQ;AAAA,KAC7C,mDAAC,QAAD;AAAA,IAAM,WAAU;AAAA,KAAsB,aACtC,mDAAC,QAAD;AAAA,IAAM,WAAU;AAAA,KAAiC,qCAGhD,gDAAY,WAAZ,mBAAoB,aACnB,mDAAC,QAAD;AAAA,IAAM,WAAU;AAAA,IAAoB,IAAG;AAAA,KACpC,+CAAY,WAAZ,mBAAoB,YAI3B,mDAAC,SAAD;AAAA,IACE,IAAG;AAAA,IACH,MAAK;AAAA,IACL,MAAK;AAAA,IACL,cAAa;AAAA,IACb,WAAU;AAAA,IACV,gBAAc,gDAAY,WAAZ,mBAAoB,YAAW,OAAO;AAAA,IACpD,oBAAiB;AAAA,IACjB,KAAK;AAAA,OAGT,mDAAC,UAAD;AAAA,IACE,WAAU;AAAA,IACV,MAAK;AAAA,KACN,WAGD,mDAAC,SAAD;AAAA,IAAO,MAAK;AAAA,IAAS,MAAK;AAAA,IAAa,OAAO;AAAA,MAC9C,mDAAC,OAAD;AAAA,IAAK,WAAU;AAAA,KACb,mDAAC,OAAD;AAAA,IAAK,WAAU;AAAA,KACb,mDAAC,SAAD;AAAA,IACE,WAAU;AAAA,IACV,IAAG;AAAA,IACH,MAAK;AAAA,IACL,MAAK;AAAA,MAEP,mDAAC,SAAD;AAAA,IACE,WAAU;AAAA,IACV,SAAQ;AAAA,KACT,iBAIH,mDAAC,OAAD;AAAA,IAAK,WAAU;AAAA,KAAoC,0BAC1B,KACvB,mDAAC,MAAD;AAAA,IACE,WAAU;AAAA,IACV,IAAI,EAAE,UAAU;AAAA,KACjB;AAAA;",
  "names": []
}
