{
  "version": 3,
  "sources": ["browser-route-module:/Users/paula/code/MusicTree/trap-stack/app/routes/join.tsx?browser", "../../../app/routes/join.tsx"],
  "sourcesContent": ["export { default, meta } from \"/Users/paula/code/MusicTree/trap-stack/app/routes/join.tsx\";", "import type {\n  ActionFunction,\n  LoaderFunction,\n  MetaFunction,\n} from \"@remix-run/node\";\nimport { json, redirect } from \"@remix-run/node\";\nimport { Form, Link, useActionData, useSearchParams } from \"@remix-run/react\";\nimport { createUserSession, getUserId } from \"~/session.server\";\nimport { createUser, getProfileByEmail } from \"~/models/user.server\";\nimport { validateEmail } from \"~/utils\";\nimport * as React from \"react\";\n\nexport const meta: MetaFunction = () => {\n  return {\n    title: \"Sign Up\",\n  };\n};\n\ninterface ActionData {\n  errors: {\n    email?: string;\n    password?: string;\n  };\n}\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  const userId = await getUserId(request);\n  if (userId) return redirect(\"/\");\n  return json({});\n};\n\nexport const action: ActionFunction = async ({ request }) => {\n  const formData = await request.formData();\n  const email = formData.get(\"email\");\n  const password = formData.get(\"password\");\n  const redirectTo = formData.get(\"redirectTo\");\n\n  // Ensure the email is valid\n  if (!validateEmail(email)) {\n    return json<ActionData>(\n      { errors: { email: \"Email is invalid.\" } },\n      { status: 400 }\n    );\n  }\n\n  // What if a user sends us a password through other means than our form?\n  if (typeof password !== \"string\") {\n    return json(\n      { errors: { password: \"Valid password is required.\" } },\n      { status: 400 }\n    );\n  }\n\n  // Enforce minimum password length\n  if (password.length < 6) {\n    return json<ActionData>(\n      { errors: { password: \"Password is too short.\" } },\n      { status: 400 }\n    );\n  }\n\n  // A user could potentially already exist within our system\n  // and we should communicate that well\n  const existingUser = await getProfileByEmail(email);\n  if (existingUser) {\n    return json<ActionData>(\n      { errors: { email: \"A user already exists with this email.\" } },\n      { status: 400 }\n    );\n  }\n\n  const user = await createUser(email, password);\n\n  return createUserSession({\n    request,\n    userId: user.id,\n    remember: false,\n    redirectTo: typeof redirectTo === \"string\" ? redirectTo : \"/\",\n  });\n};\n\nexport default function Join() {\n  const [searchParams] = useSearchParams();\n  const redirectTo = searchParams.get(\"redirectTo\") ?? undefined;\n\n  const actionData = useActionData() as ActionData;\n  const emailRef = React.useRef<HTMLInputElement>(null);\n  const passwordRef = React.useRef<HTMLInputElement>(null);\n\n  React.useEffect(() => {\n    if (actionData?.errors?.email) {\n      emailRef?.current?.focus();\n    }\n\n    if (actionData?.errors?.password) {\n      passwordRef?.current?.focus();\n    }\n  }, [actionData]);\n\n  return (\n    <div className=\"flex min-h-full flex-col justify-center\">\n      <div className=\"mx-auto w-full max-w-md px-8\">\n        <Form className=\"space-y-6\" method=\"post\" noValidate>\n          <div>\n            <label className=\"text-sm font-medium\" htmlFor=\"email\">\n              <span className=\"block text-gray-700\">Email Address</span>\n              {actionData?.errors?.email && (\n                <span className=\"block pt-1 text-red-700\" id=\"email-error\">\n                  {actionData?.errors?.email}\n                </span>\n              )}\n            </label>\n            <input\n              className=\"w-full rounded border border-gray-500 px-2 py-1 text-lg\"\n              type=\"email\"\n              name=\"email\"\n              id=\"email\"\n              required\n              aria-invalid={actionData?.errors?.email ? true : undefined}\n              aria-describedby=\"email-error\"\n              ref={emailRef}\n            />\n          </div>\n          <div>\n            <label className=\"text-sm font-medium\" htmlFor=\"password\">\n              <span className=\"block text-gray-700\">Password</span>\n              <span className=\"block font-light text-gray-700\">\n                Must have at least 6 characters.\n              </span>\n              {actionData?.errors?.password && (\n                <span className=\"pt-1 text-red-700\" id=\"password-error\">\n                  {actionData?.errors?.password}\n                </span>\n              )}\n            </label>\n            <input\n              id=\"password\"\n              type=\"password\"\n              name=\"password\"\n              className=\"w-full rounded border border-gray-500 px-2 py-1 text-lg\"\n              autoComplete=\"new-password\"\n              aria-invalid={actionData?.errors?.password ? true : undefined}\n              aria-describedby=\"password-error\"\n              ref={passwordRef}\n            />\n          </div>\n          <button\n            className=\"w-full rounded bg-blue-500  py-2 px-4 text-white hover:bg-blue-600 focus:bg-blue-400\"\n            type=\"submit\"\n          >\n            Create Account\n          </button>\n          <input type=\"hidden\" name=\"redirectTo\" value={redirectTo} />\n          <div className=\"flex items-center justify-center\">\n            <div className=\"text-center text-sm text-gray-500\">\n              Already have an account?{\" \"}\n              <Link\n                className=\"text-blue-500 underline\"\n                to={{\n                  pathname: \"/login\",\n                  search: searchParams.toString(),\n                }}\n              >\n                Log in\n              </Link>\n            </div>\n          </div>\n        </Form>\n      </div>\n    </div>\n  );\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;;;ACAA;AAOA,qBAA6C;AAC7C,kBAA8C;AAE9C,YAAuB;AAEhB,IAAM,OAAqB,MAAM;AACtC,SAAO;AAAA,IACL,OAAO;AAAA;AAAA;AAmEI,gBAAgB;AAjF/B;AAkFE,QAAM,CAAC,gBAAgB;AACvB,QAAM,aAAa,mBAAa,IAAI,kBAAjB,YAAkC;AAErD,QAAM,aAAa;AACnB,QAAM,WAAW,AAAM,aAAyB;AAChD,QAAM,cAAc,AAAM,aAAyB;AAEnD,EAAM,gBAAU,MAAM;AAzFxB;AA0FI,QAAI,gDAAY,WAAZ,oBAAoB,OAAO;AAC7B,kDAAU,YAAV,oBAAmB;AAAA;AAGrB,QAAI,gDAAY,WAAZ,oBAAoB,UAAU;AAChC,wDAAa,YAAb,oBAAsB;AAAA;AAAA,KAEvB,CAAC;AAEJ,SACE,oCAAC,OAAD;AAAA,IAAK,WAAU;AAAA,KACb,oCAAC,OAAD;AAAA,IAAK,WAAU;AAAA,KACb,oCAAC,MAAD;AAAA,IAAM,WAAU;AAAA,IAAY,QAAO;AAAA,IAAO,YAAU;AAAA,KAClD,oCAAC,OAAD,MACE,oCAAC,SAAD;AAAA,IAAO,WAAU;AAAA,IAAsB,SAAQ;AAAA,KAC7C,oCAAC,QAAD;AAAA,IAAM,WAAU;AAAA,KAAsB,kBACrC,gDAAY,WAAZ,mBAAoB,UACnB,oCAAC,QAAD;AAAA,IAAM,WAAU;AAAA,IAA0B,IAAG;AAAA,KAC1C,+CAAY,WAAZ,mBAAoB,SAI3B,oCAAC,SAAD;AAAA,IACE,WAAU;AAAA,IACV,MAAK;AAAA,IACL,MAAK;AAAA,IACL,IAAG;AAAA,IACH,UAAQ;AAAA,IACR,gBAAc,gDAAY,WAAZ,mBAAoB,SAAQ,OAAO;AAAA,IACjD,oBAAiB;AAAA,IACjB,KAAK;AAAA,OAGT,oCAAC,OAAD,MACE,oCAAC,SAAD;AAAA,IAAO,WAAU;AAAA,IAAsB,SAAQ;AAAA,KAC7C,oCAAC,QAAD;AAAA,IAAM,WAAU;AAAA,KAAsB,aACtC,oCAAC,QAAD;AAAA,IAAM,WAAU;AAAA,KAAiC,qCAGhD,gDAAY,WAAZ,mBAAoB,aACnB,oCAAC,QAAD;AAAA,IAAM,WAAU;AAAA,IAAoB,IAAG;AAAA,KACpC,+CAAY,WAAZ,mBAAoB,YAI3B,oCAAC,SAAD;AAAA,IACE,IAAG;AAAA,IACH,MAAK;AAAA,IACL,MAAK;AAAA,IACL,WAAU;AAAA,IACV,cAAa;AAAA,IACb,gBAAc,gDAAY,WAAZ,mBAAoB,YAAW,OAAO;AAAA,IACpD,oBAAiB;AAAA,IACjB,KAAK;AAAA,OAGT,oCAAC,UAAD;AAAA,IACE,WAAU;AAAA,IACV,MAAK;AAAA,KACN,mBAGD,oCAAC,SAAD;AAAA,IAAO,MAAK;AAAA,IAAS,MAAK;AAAA,IAAa,OAAO;AAAA,MAC9C,oCAAC,OAAD;AAAA,IAAK,WAAU;AAAA,KACb,oCAAC,OAAD;AAAA,IAAK,WAAU;AAAA,KAAoC,4BACxB,KACzB,oCAAC,MAAD;AAAA,IACE,WAAU;AAAA,IACV,IAAI;AAAA,MACF,UAAU;AAAA,MACV,QAAQ,aAAa;AAAA;AAAA,KAExB;AAAA;",
  "names": []
}
